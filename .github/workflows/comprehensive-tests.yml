name: Comprehensive Test Suite

# Trigger on pushes to main and all pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    # Also trigger on specific paths that affect functionality
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/comprehensive-tests.yml'

# Allow manual triggering for testing
  workflow_dispatch:

# Set environment variables for all jobs
env:
  # Force testing mode to ensure all tests use mocks instead of real APIs
  TESTING: true
  CI: true
  # Mock API keys for testing - no real external calls will be made
  COMPOSIO_API_KEY: mock_composio_key_for_testing
  OPENAI_API_KEY: mock_openai_key_for_testing
  ANTHROPIC_API_KEY: mock_anthropic_key_for_testing
  GOOGLE_API_KEY: mock_google_key_for_testing
  PINECONE_API_TOKEN: mock_pinecone_token_for_testing

jobs:
  backend-tests:
    name: Backend Comprehensive Tests
    runs-on: ubuntu-latest
    
    # Set up MongoDB service for testing
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Install MongoDB tools
      run: |
        echo "Installing MongoDB tools from official repository..."
        
        # Import MongoDB public GPG key
        curl -fsSL https://pgp.mongodb.com/server-7.0.asc | \
          sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
        
        # Add MongoDB repository
        echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | \
          sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        
        # Update package list and install mongosh
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh
        
        # Verify installation
        if command -v mongosh &> /dev/null; then
          echo "‚úÖ MongoDB tools installed successfully"
          mongosh --version
        else
          echo "‚ùå MongoDB tools installation failed"
          exit 1
        fi

    - name: Wait for MongoDB to be ready
      run: |
        for i in {1..30}; do
          if mongosh --host localhost:27017 --eval "db.runCommand({ping: 1})" --quiet; then
            echo "MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB... ($i/30)"
          sleep 2
        done

    - name: Test MongoDB connection
      run: |
        mongosh --host localhost:27017 --eval "
          db.test.insertOne({test: 'connection'});
          print('MongoDB connection successful');
          db.test.drop();
        "

    # Run different categories of backend tests
    - name: Run critical tests (regression & core functionality)
      run: |
        cd backend
        pytest -m "critical or regression" -v --tb=short --durations=10
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test

    - name: Run email flow tests (comprehensive)
      run: |
        cd backend
        pytest tests/test_email_*.py -v --tb=short
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test

    - name: Run calendar tests (all calendar functionality)
      run: |
        cd backend
        pytest tests/test_calendar_*.py -v --tb=short
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test

    - name: Run draft system tests (email drafting)
      run: |
        cd backend
        pytest tests/test_draft_*.py -v --tb=short
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test

    - name: Run composio integration tests
      run: |
        cd backend
        pytest tests/test_composio_*.py -v --tb=short
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test

    - name: Run optimized integration tests (token-efficient)
      run: |
        cd backend
        pytest -m "optimized or mock_only" -v --tb=short
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test

    - name: Run remaining integration tests
      run: |
        cd backend
        pytest tests/ -v --tb=short \
          --ignore=tests/test_email_data_processing_regression.py \
          --ignore=tests/test_email_count_verification.py \
          --ignore=tests/test_email_integration_flow.py \
          -m "not health_check"
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test

    - name: Run tests in backend root directory
      run: |
        cd backend
        python -m pytest test_*.py -v --tb=short || echo "No root-level tests found"
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test

    - name: Run backend tests with coverage
      run: |
        cd backend
        pytest tests/ -m "not health_check" \
          --cov=models --cov=services --cov=utils --cov=app \
          --cov-report=xml --cov-report=term-missing \
          --cov-fail-under=50
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test

    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./backend/coverage.xml
        flags: backend-comprehensive
        name: backend-comprehensive-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting (if configured)
      run: |
        cd frontend
        if npm run lint --silent 2>/dev/null; then
          npm run lint
        else
          echo "No linting configured, skipping..."
        fi

    - name: Run frontend tests
      run: |
        cd frontend
        CI=true npm test -- --coverage --verbose --watchAll=false
      env:
        CI: true

    - name: Build frontend for production
      run: |
        cd frontend
        npm run build

    - name: Upload frontend coverage (if generated)
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Optional: Integration tests that verify frontend-backend communication
  integration-tests:
    name: Frontend-Backend Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python and Node.js
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        # Backend
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # Frontend
        cd ../frontend
        npm ci

    - name: Wait for MongoDB
      run: |
        for i in {1..30}; do
          if mongosh --host localhost:27017 --eval "db.runCommand({ping: 1})" --quiet; then
            echo "MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB... ($i/30)"
          sleep 2
        done

    - name: Start backend server in background
      run: |
        cd backend
        python app.py &
        sleep 10
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test
        TESTING: true
        CI: true

    - name: Test API endpoints availability
      run: |
        curl -f http://localhost:5001/health || echo "Health endpoint not available"
        curl -f http://localhost:5001/threads || echo "Threads endpoint test"

  # Summary job that aggregates all test results
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "=== COMPREHENSIVE TEST SUITE RESULTS ==="
        echo ""
        
        if [ "${{ needs.backend-tests.result }}" = "success" ]; then
          echo "‚úÖ Backend Tests: PASSED"
        else
          echo "‚ùå Backend Tests: FAILED"
        fi
        
        if [ "${{ needs.frontend-tests.result }}" = "success" ]; then
          echo "‚úÖ Frontend Tests: PASSED" 
        else
          echo "‚ùå Frontend Tests: FAILED"
        fi
        
        echo ""
        echo "üîç Tests covered:"
        echo "  Backend:"
        echo "    - Critical functionality (regression prevention)"
        echo "    - Email flow tests (comprehensive)"
        echo "    - Calendar integration tests"
        echo "    - Draft system tests"
        echo "    - Composio integration tests"
        echo "    - Optimized integration tests (token-efficient)"
        echo "    - Unit and integration tests"
        echo "  Frontend:"
        echo "    - React component tests"
        echo "    - Build verification"
        echo ""
        echo "üí° Key Benefits:"
        echo "  ‚úÖ Complete functionality coverage"
        echo "  ‚úÖ No real API calls or token consumption"
        echo "  ‚úÖ No real emails sent or calendar events created"
        echo "  ‚úÖ Fast execution with comprehensive mocking"
        echo "  ‚úÖ Regression protection across all components"
        echo ""
        
        # Set overall result
        if [ "${{ needs.backend-tests.result }}" = "success" ] && [ "${{ needs.frontend-tests.result }}" = "success" ]; then
          echo "üéâ COMPREHENSIVE TEST SUITE: ALL TESTS PASSED!"
          exit 0
        else
          echo "üí• COMPREHENSIVE TEST SUITE: SOME TESTS FAILED!"
          echo "Please review the failing tests before merging."
          exit 1
        fi
