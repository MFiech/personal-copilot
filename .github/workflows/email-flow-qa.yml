name: Email Flow QA Tests

# Trigger on pushes to main and all pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    # Also trigger on specific paths that affect email functionality
    paths:
      - 'backend/**'
      - '.github/workflows/email-flow-qa.yml'

# Allow manual triggering for testing
  workflow_dispatch:

jobs:
  email-flow-tests:
    name: Email Flow QA Tests
    runs-on: ubuntu-latest
    
    # Set up MongoDB service for testing
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-mock pytest-cov

    - name: Install MongoDB tools
      # Install mongosh (MongoDB shell) for database connection testing
      # This is required because the Ubuntu runner doesn't have MongoDB tools pre-installed
      run: |
        echo "Installing MongoDB tools using universal method..."
        
        # Method 1: Try to install from Ubuntu universe repository (most reliable)
        sudo apt-get update
        if sudo apt-get install -y mongodb-clients; then
          echo "MongoDB tools installed from Ubuntu repository"
          # Create mongosh symlink if needed
          if ! command -v mongosh &> /dev/null; then
            sudo ln -sf /usr/bin/mongo /usr/local/bin/mongosh
          fi
        else
          echo "Ubuntu repository method failed, trying alternative approaches..."
          
          # Method 2: Try snap installation
          if command -v snap &> /dev/null; then
            echo "Installing via snap..."
            sudo snap install mongodb-mongosh --classic
          else
            echo "Snap not available, trying binary download..."
            
            # Method 3: Download pre-compiled binary
            wget -qO mongosh.tgz "https://downloads.mongodb.org/linux/mongosh-2.1.1-linux-x64.tgz"
            tar -xzf mongosh.tgz
            sudo mv mongosh-2.1.1-linux-x64/bin/mongosh /usr/local/bin/
            rm -rf mongosh.tgz mongosh-2.1.1-linux-x64
          fi
        fi
        
        # Verify installation
        if command -v mongosh &> /dev/null; then
          echo "‚úÖ MongoDB tools installed successfully"
          mongosh --version
        elif command -v mongo &> /dev/null; then
          echo "‚úÖ MongoDB tools installed (using mongo command)"
          mongo --version
        else
          echo "‚ö†Ô∏è MongoDB tools installation may have failed, but continuing..."
        fi

    - name: Wait for MongoDB to be ready
      run: |
        for i in {1..30}; do
          if mongosh --host localhost:27017 --eval "db.runCommand({ping: 1})" --quiet; then
            echo "MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB... ($i/30)"
          sleep 2
        done

    - name: Test MongoDB connection
      run: |
        mongosh --host localhost:27017 --eval "
          db.test.insertOne({test: 'connection'});
          print('MongoDB connection successful');
          db.test.drop();
        "

    - name: Run email flow regression tests
      run: |
        cd backend
        pytest tests/test_email_data_processing_regression.py -v --tb=short
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test
        # Mock environment variables for testing - prevent external API calls
        COMPOSIO_API_KEY: test_key_for_mocking
        OPENAI_API_KEY: test_key_for_mocking
        ANTHROPIC_API_KEY: test_key_for_mocking
        GOOGLE_API_KEY: test_key_for_mocking
        PINECONE_API_TOKEN: test_key_for_mocking
        # Set test environment to prevent external service calls
        TESTING: true
        CI: true

    - name: Run email count verification tests
      run: |
        cd backend
        pytest tests/test_email_count_verification.py -v --tb=short
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test
        COMPOSIO_API_KEY: test_key_for_mocking
        OPENAI_API_KEY: test_key_for_mocking
        ANTHROPIC_API_KEY: test_key_for_mocking
        GOOGLE_API_KEY: test_key_for_mocking
        PINECONE_API_TOKEN: test_key_for_mocking
        TESTING: true
        CI: true

    - name: Run email integration flow tests
      run: |
        cd backend
        pytest tests/test_email_integration_flow.py -v --tb=short
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test
        COMPOSIO_API_KEY: test_key_for_mocking
        OPENAI_API_KEY: test_key_for_mocking
        ANTHROPIC_API_KEY: test_key_for_mocking
        GOOGLE_API_KEY: test_key_for_mocking
        PINECONE_API_TOKEN: test_key_for_mocking
        TESTING: true
        CI: true

    - name: Run email endpoint tests
      run: |
        cd backend
        pytest tests/test_email_endpoints.py -v --tb=short
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test
        COMPOSIO_API_KEY: test_key_for_mocking
        OPENAI_API_KEY: test_key_for_mocking
        ANTHROPIC_API_KEY: test_key_for_mocking
        GOOGLE_API_KEY: test_key_for_mocking
        PINECONE_API_TOKEN: test_key_for_mocking
        TESTING: true
        CI: true

    - name: Run all email tests with coverage
      run: |
        cd backend
        pytest tests/test_email_*.py --cov=models --cov=services --cov-report=xml --cov-report=term-missing
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: pm_copilot_test
        COMPOSIO_API_KEY: test_key_for_mocking
        OPENAI_API_KEY: test_key_for_mocking
        ANTHROPIC_API_KEY: test_key_for_mocking
        GOOGLE_API_KEY: test_key_for_mocking
        PINECONE_API_TOKEN: test_key_for_mocking
        TESTING: true
        CI: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./backend/coverage.xml
        flags: email-flow-tests
        name: email-flow-coverage

    - name: Test summary
      run: |
        echo "‚úÖ All email flow QA tests completed successfully!"
        echo "üîç Tests covered:"
        echo "  - Data structure regression tests (the fix we implemented)"
        echo "  - Email count verification (retrieval vs. saved)"
        echo "  - Full integration flow tests"
        echo "  - Email endpoint tests (/get_email_content, /summarize_single_email)"
        echo "  - Error handling and edge cases"
        echo "  - Performance with large email batches"
        echo "  - All external API calls properly mocked for CI/CD"

  # Job to check if tests are required (for PR status checks)
  email-tests-required:
    name: Email Tests Status Check
    runs-on: ubuntu-latest
    needs: email-flow-tests
    if: always()
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.email-flow-tests.result }}" = "success" ]; then
          echo "‚úÖ All email flow tests passed!"
          exit 0
        else
          echo "‚ùå Email flow tests failed!"
          echo "This indicates a potential regression in email functionality."
          echo "Please review the test failures before merging."
          exit 1
        fi

  # Optional: Deploy or notify on success (you can customize this)
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: email-flow-tests
    if: success() && github.ref == 'refs/heads/main'
    steps:
    - name: Success notification
      run: |
        echo "üéâ Email flow QA tests passed on main branch!"
        echo "The email retrieval and MongoDB saving functionality is working correctly."
        echo "All external API calls are properly mocked for CI/CD environment."